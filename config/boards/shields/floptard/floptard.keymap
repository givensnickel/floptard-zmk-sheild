#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define L_MAIN 0
#define L_RAISE 1
#define L_LOWER 1
#define L_GAME 2

#define DEFAULT_TAPTERM_MS 200
#define COMBO_TIMEOUT 50
#define MEANT_TO_TAP_TIME 2000

#define KRC(row, col) (((row) * 12) + (col))
#define BTP_SEL(PROF) &bt BT_SEL PROF
#define CAREFUL_KEY(BINDING)\
			compatible = "zmk,behavior-hold-tap";\
			#binding-cells = <2>;\
\
			flavor = "hold-preferred";\
			tapping-term-ms = <MEANT_TO_TAP_TIME>;\
			bindings = <&none (BINDING)>;

// #define GCOMBO(NAME, BINDINGS, KEYPOS) \
// 	combo_##NAME { \
// 		bindings = <BINDINGS>; \
// 		timeout-ms = <30>; \
// 		key-positions = <KEYPOS>; \
// 	};


// Tab align to 4 spaces or perish

&soft_off {
	hold-time-ms = <MEANT_TO_TAP_TIME>;
};

/ {
	combos {
		compatible = "zmk,combos";

		combo_esc {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <KRC(0,0) KRC(1,0)>; // Grave and Tab
			bindings = <&kp ESC>;
			layers =  <L_MAIN L_GAME>;
		};

		combo_game_layer {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <KRC(4,0) KRC(4,7)>; // Outside thumbs
			bindings = <&to L_GAME>;
			layers =  <L_MAIN>;
		};

		combo_leave_game_layer {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <KRC(4,0) KRC(4,7)>; // Outside thumbs
			bindings = <&to L_MAIN>;
			layers =  <L_GAME>;
		};
	};

	behaviors {
		td_rs: tap_dance_rshift_rctrl {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;

			tapping-term-ms = <DEFAULT_TAPTERM_MS>;
			bindings = <&kp RSHIFT>, <&kp RCTRL>;
		};

		c_boot: careful_boot {CAREFUL_KEY(&bootloader)};

		bt_clr: careful_bt_clear {CAREFUL_KEY(&bt BT_CLR)};
};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			//                                    Main Layer
			// =========================================================================================
			// |  ~   |  1  |  2  |  3  |  4  |  5  | ║ |  6  |  7  |  8  |  9  |  0  |    BKSP   |
			// | TAB  |  Q  |  W  |  F  |  P  |  B  | ║ |  J  |  L  |  U  |  Y  |  ;  |     \     |
			// | CTRL |  A  |  R  |  S  |  T  |  G  | ║ |  M  |  N  |  E  |  I  |  O  |    ENTR   |
			// | SHFT |  Z  |  X  |  C  |  D  |  V  | ║ |  K  |  H  |  ,  |  .  |  /  | SHFT/CTRL |
			//              | GUI | SPC | ALT | L_? | ║ | L_? | ALT | SPC | GUI |

			bindings = <
				&kp GRAVE	&kp N1	&kp N2		&kp N3		&kp N4		&kp N5		/*║*/	&kp N6		&kp N7		&kp N8		&kp N9		&kp N0		&kp BSPC
				&kp TAB		&kp Q	&kp W		&kp F		&kp P		&kp B		/*║*/	&kp J		&kp L		&kp U		&kp Y		&kp SEMI	&kp BSLH
				&kp LCTRL	&kp A	&kp R		&kp S		&kp T		&kp G		/*║*/	&kp M		&kp N		&kp E		&kp I		&kp O		&kp RET
				&kp LSHFT	&kp Z	&kp X		&kp C		&kp D		&kp V		/*║*/	&kp K		&kp H		&kp COMMA	&kp DOT		&kp FSLH	&td_rs
									&mo L_LOWER	&kp SPACE	&kp LGUI	&kp LALT	/*║*/	&kp RALT	&kp RGUI	&kp SPACE	&mo L_RAISE
			>;
		};

		lower_layer {
			//                                    Main Layer
			// =========================================================================================
			// | ESC  | FN1 | FN2  |  FN3  |   FN4  | FN5 | ║ | FN6  | FN7  | FN8  | FN9  | F10 | DEL  |
			// | TAB  | OFF | BOOT | OUT_U |  OUT_B |     | ║ |  -   |  =   |  [   |  ]   | F11 | BOOT |
			// | CTRL | BT0 | BT1  |  BT2  |   BT3  | BTC | ║ | LEFT | DOWN |  UP  | RGHT | F12 | ENTR |
			// | SHFT |     | RWD  |  FWD  |  PAUSE |     | ║ | HOME | PGDN | PGUP | END  | PRT | SHFT |
			//              | GUI  |  SPC  |   ALT  | L_? | ║ | L_?  | ALT  | SPC  | GUI  |

			bindings = <
				&kp ESC		&kp F1		&kp F2		&kp F3			&kp F4			&kp F5		/*║*/	&kp F6		&kp F7		&kp F8		&kp F9		&kp F10		&kp BSPC
				&kp TAB		&soft_off	&c_boot		&out OUT_USB	&out OUT_BLE	&none		/*║*/	&kp MINUS	&kp EQUAL	&kp LBKT	&kp RBKT	&kp F11		&c_boot
				&kp LCTRL	BTP_SEL(0)	BTP_SEL(1)	BTP_SEL(2)		BTP_SEL(3)		&bt_clr		/*║*/	&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT	&kp F12		&kp RET
				&kp LSHFT	&none		&kp C_PREV	&kp C_NEXT		&kp C_PP		&none		/*║*/	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END		&kp PSCRN	&td_rs
										&trans		&kp SPACE		&kp LGUI		&kp LALT	/*║*/	&kp RALT	&kp RGUI	&kp SPACE	&trans
			>;
		};

		// raise_layer {
		// 	//                                    Main Layer
		// 	// =========================================================================================
		// 	// |  ~   |  1  |  2  |  3  |  4  |  5  | ║ |  6  |  7  |  8  |  9  |  0  | BKSP |
		// 	// | TAB  |  Q  |  W  |  F  |  P  |  B  | ║ |  J  |  L  |  U  |  Y  |  ;  |  \   |
		// 	// | CTRL |  A  |  R  |  S  |  T  |  G  | ║ |  M  |  N  |  E  |  I  |  O  | ENTR |
		// 	// | SHFT |  Z  |  X  |  C  |  D  |  V  | ║ |  K  |  H  |  ,  |  .  |  /  | SHFT |
		// 	//              | GUI | SPC | ALT | L_? | ║ | L_? | ALT | SPC | GUI |
		//
		// 	bindings = <
		// 		&kp GRAVE	&kp N1	&kp N2	&kp N3		&kp N4		&kp N5		/*║*/	&kp N6		&kp N7		&kp N8		&kp N9	&kp N0		&kp BSPC
		// 		&kp TAB		&kp Q	&kp W	&kp F		&kp P		&kp B		/*║*/	&kp J		&kp L		&kp U		&kp Y	&kp SEMI	&kp BSLH
		// 		&kp LCTRL	&kp A	&kp R	&kp S		&kp N8		&kp G		/*║*/	&kp M		&kp N		&kp E		&kp I	&kp O		&kp RET
		// 		&kp LSHFT	&kp Z	&kp X	&kp C		&kp D		&kp V		/*║*/	&kp K		&kp H		&kp COMMA	&kp DOT	&kp FSLH	&td_rs
		// 							&trans	&kp SPACE	&kp LGUI	&kp LALT	/*║*/	&kp RALT	&kp RGUI	&kp SPACE	&trans
		// 	>;
		// };

		game_layer {
			//                                    Game Layer
			// =========================================================================================
			// |  ~   |  1  |  2  |  3  |  4  |  5  | ║ |  6  |  7  |  8  |  9  |  0  | BKSP |
			// | TAB  |  Q  |  W  |  E  |  R  |  T  | ║ |  Y  |  U  |  I  |  O  |  P  |  \   |
			// | CTRL |  A  |  S  |  D  |  F  |  G  | ║ |  H  |  J  |  K  |  L  |  ;  | ENTR |
			// | SHFT |  Z  |  X  |  C  |  V  |  B  | ║ |  N  |  M  |  ,  |  .  |  /  | SHFT |
			//              | GUI | SPC | ALT | L_? | ║ | L_? | ALT | SPC | GUI |

			bindings = <
				&kp GRAVE	&kp N1	&kp N2		&kp N3		&kp N4		&kp N5		/*║*/	&kp N6		&kp N7		&kp N8		&kp N9		&kp N0		&kp BSPC
				&kp TAB		&kp Q	&kp W		&kp E		&kp R		&kp T		/*║*/	&kp Y		&kp U		&kp I		&kp O		&kp P		&kp BSLH
				&kp LCTRL	&kp A	&kp S		&kp D		&kp F		&kp G		/*║*/	&kp H		&kp J		&kp K		&kp L		&kp SEMI	&kp RET
				&kp LSHFT	&kp Z	&kp X		&kp C		&kp V		&kp B		/*║*/	&kp N		&kp M		&kp COMMA	&kp DOT		&kp FSLH	&td_rs
									&mo L_LOWER	&kp SPACE	&kp LGUI	&kp LALT	/*║*/	&kp RALT	&kp RGUI	&kp SPACE	&mo L_RAISE
			>;
		};
	};
};








// 		lower_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
// //		    | GUI |     | SPC |   | ENT |     | ALT |
// 			bindings = <
//    &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5	 &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
//    &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
//    &kp LSHFT  &trans       &trans       &trans       &trans       &trans	 &trans   &trans   &trans &trans    &trans &trans
// 				    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
// 			>;
// 		};
//
// 		raise_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
// //		    | GUI |     | SPC |   | ENT |     | ALT |
// 			bindings = <
//    &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
//    &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
//    &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
// 			     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
// 			>;
// 		};
