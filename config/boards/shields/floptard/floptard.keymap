// Tab align to 4 spaces or perish

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define L_MAIN 0
#define L_RAISE 3
#define L_LOWER 3
#define L_GAME 1
#define L_QWERTY 2

#define DEFAULT_TAPTERM_MS 200
#define COMBO_TIMEOUT 50
#define MEANT_TO_TAP_TIME 2000

#define KRC(row, col) (((row) * 12) + (col))
#define COMBO_LAYER_KEYS KRC(4,0) KRC(4,7)
#define COMBO_SHIFT_LAYER_KEYS KRC(3,0) KRC(4,0) KRC(4,7)
#define COMBO_GRAVE_TAB_KEYS KRC(0,0) KRC(1,0)

#define BTP_SEL(PROF) &bt BT_SEL PROF
#define CAREFUL_KEY(BINDING)\
			compatible = "zmk,behavior-hold-tap";\
			#binding-cells = <2>;\
\
			flavor = "hold-preferred";\
			tapping-term-ms = <MEANT_TO_TAP_TIME>;\
			bindings = <BINDING>, <&none>;

#define COMMON_COMBO(NAME, BINDING, KEYS, LAYERS)\
		NAME {\
			timeout-ms = <COMBO_TIMEOUT>;\
			key-positions = KEYS;\
			bindings = <BINDING>;\
			layers =  <LAYERS>;\
		};

&soft_off {
	hold-time-ms = <MEANT_TO_TAP_TIME>;
};

/ {
	combos {
		compatible = "zmk,combos";

		// Grave and Tab
		COMMON_COMBO(combo_esc, &kp ESC, <COMBO_GRAVE_TAB_KEYS>, L_MAIN L_GAME);
		// combo_esc {
		// 	timeout-ms = <COMBO_TIMEOUT>;
		// 	key-positions = <KRC(0,0) KRC(1,0)>; // Grave and Tab
		// 	bindings = <&kp ESC>;
		// 	layers =  <L_MAIN L_GAME>;
		// };

		// Both layer keys
		COMMON_COMBO(combo_game_layer, &to L_GAME, <COMBO_LAYER_KEYS>, L_MAIN L_QWERTY);
		// combo_game_layer {
		// 	timeout-ms = <COMBO_TIMEOUT>;
		// 	key-positions = <KRC(4,0) KRC(4,7)>; // Outside thumbs
		// 	bindings = <&to L_GAME>;
		// 	layers =  <L_MAIN>;
		// };

		COMMON_COMBO(combo_leave_game_layer, &to L_MAIN, <COMBO_LAYER_KEYS>, L_GAME);
		// combo_leave_game_layer {
		// 	timeout-ms = <COMBO_TIMEOUT>;
		// 	key-positions = <KRC(4,0) KRC(4,7)>; // Outside thumbs
		// 	bindings = <&to L_MAIN>;
		// 	layers =  <L_GAME>;
		// };

		COMMON_COMBO(combo_qwerty_layer, &to L_QWERTY, <COMBO_SHIFT_LAYER_KEYS>, L_MAIN L_GAME);
		COMMON_COMBO(combo_leave_qwerty_layer, &to L_MAIN, <COMBO_SHIFT_LAYER_KEYS>, L_QWERTY);
	};

	macros {
		bt_clr: bluetooth_clear_no_params {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&bt BT_CLR>;
		};
	};

	behaviors {
		td_rs: tap_dance_rshift_rctrl {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;

			tapping-term-ms = <DEFAULT_TAPTERM_MS>;
			bindings = <&kp RSHIFT>, <&kp RCTRL>;
		};

		c_lboot: left_careful_boot {CAREFUL_KEY(&bootloader)};
		c_rboot: right_careful_boot {CAREFUL_KEY(&bootloader)};
		c_bt: careful_bt {CAREFUL_KEY(&bt_clr)};
};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			//                                    Main Layer
			// =========================================================================================
			// |  ~   |  1  |  2  |  3  |  4  |  5  | ║ |  6  |  7  |  8  |  9  |  0  |    BKSP   |
			// | TAB  |  Q  |  W  |  F  |  P  |  B  | ║ |  J  |  L  |  U  |  Y  |  ;  |     \     |
			// | CTRL |  A  |  R  |  S  |  T  |  G  | ║ |  M  |  N  |  E  |  I  |  O  |    ENTR   |
			// | SHFT |  Z  |  X  |  C  |  D  |  V  | ║ |  K  |  H  |  ,  |  .  |  /  | SHFT/CTRL |
			//              | GUI | SPC | ALT | L_? | ║ | L_? | ALT | SPC | GUI |

			bindings = <
				&kp GRAVE	&kp N1	&kp N2		&kp N3		&kp N4		&kp N5		/*║*/	&kp N6		&kp N7		&kp N8		&kp N9		&kp N0		&kp BSPC
				&kp TAB		&kp Q	&kp W		&kp F		&kp P		&kp B		/*║*/	&kp J		&kp L		&kp U		&kp Y		&kp SEMI	&kp BSLH
				&kp LCTRL	&kp A	&kp R		&kp S		&kp T		&kp G		/*║*/	&kp M		&kp N		&kp E		&kp I		&kp O		&kp RET
				&kp LSHFT	&kp Z	&kp X		&kp C		&kp D		&kp V		/*║*/	&kp K		&kp H		&kp COMMA	&kp DOT		&kp FSLH	&td_rs
									&mo L_LOWER	&kp SPACE	&kp LGUI	&kp LALT	/*║*/	&kp RALT	&kp RGUI	&kp SPACE	&mo L_RAISE
			>;
		};

		game_layer {
			//                                   Game Layer
			// =========================================================================================
			// | [^] | [^]  | [^] | [^] | [^] | [^] | ║ | [^] | [^] | [^] | [^] | [^] | [^] |
			// |  T  | TAB  |  Q  |  W  |  E  |  R  | ║ |  Y  |  U  |  I  |  O  |  P  | [^] |
			// |  G  | CTRL |  A  |  S  |  D  |  F  | ║ |  H  |  J  |  K  |  L  |  ;  | [^] |
			// |  B  | SHFT |  Z  |  X  |  C  |  V  | ║ |  N  |  M  |  ,  |  .  |  /  | [^] |
			//              | [^] | [^] | [^] | [^] | ║ | [^] | [^] | [^] | [^] |

			bindings = <
				&trans	&trans		&trans	&trans	&trans	&trans	/*║*/	&trans	&trans	&trans		&trans		&trans		&trans
				&kp T	&kp TAB		&kp Q	&kp W	&kp E	&kp R	/*║*/	&kp Y	&kp U	&kp I		&kp O		&kp P		&trans
				&kp G	&kp LCTRL	&kp A	&kp S	&kp D	&kp F	/*║*/	&kp H	&kp J	&kp K		&kp L		&kp SEMI	&trans
				&kp B	&kp LSHFT	&kp Z	&kp X	&kp C	&kp V	/*║*/	&kp N	&kp M	&kp COMMA	&kp DOT		&kp FSLH	&trans
									&trans	&trans	&trans	&trans	/*║*/	&trans	&trans	&trans		&trans
			>;
		};

		qwerty_layer {
			//                                 Qwerty Layer
			// =========================================================================================
			// | [^] | [^] | [^] | [^] | [^] | [^] | ║ | [^] | [^] | [^] | [^] | [^] | [^] |
			// | [^] |  Q  |  W  |  E  |  R  |  T  | ║ |  Y  |  U  |  I  |  O  |  P  | [^] |
			// | [^] |  A  |  S  |  D  |  F  |  G  | ║ |  H  |  J  |  K  |  L  |  ;  | [^] |
			// | [^] |  Z  |  X  |  C  |  V  |  B  | ║ |  N  |  M  |  ,  |  .  |  /  | [^] |
			//             | [^] | [^] | [^] | [^] | ║ | [^] | [^] | [^] | [^] |

			bindings = <
				&kp GRAVE	&trans	&trans	&trans	&trans	&trans	/*║*/	&trans	&trans	&trans		&trans		&trans		&trans
				&kp TAB		&kp Q	&kp W	&kp E	&kp R	&kp T	/*║*/	&kp Y	&kp U	&kp I		&kp O		&kp P		&trans
				&kp LCTRL	&kp A	&kp S	&kp D	&kp F	&kp G	/*║*/	&kp H	&kp J	&kp K		&kp L		&kp SEMI	&trans
				&kp LSHFT	&kp Z	&kp X	&kp C	&kp V	&kp B	/*║*/	&kp N	&kp M	&kp COMMA	&kp DOT		&kp FSLH	&trans
									&trans	&trans	&trans	&trans	/*║*/	&trans	&trans	&trans		&trans
			>;
		};

		lower_layer {
			//                                    Main Layer
			// ============================================================================================
			// | ESC |  FN1  |  FN2  |  FN3  |  FN4  | FN5 | ║ | FN6  | FN7  | FN8  | FN9  | F10 | DEL  |
			// | [^] |  OFF  |  BOOT | OUT_U | OUT_B |     | ║ |  -   |  =   |  [   |  ]   | F11 | BOOT |
			// | [^] | VOLDN | VOLUP |  RWD  | PAUSE | FWD | ║ | LEFT | DOWN |  UP  | RGHT | F12 | [^]  |
			// | [^] |  BT0  |  BT1  |  BT2  |  BT3  | BTC | ║ | HOME | PGDN | PGUP | END  | PRT | [^]  |
			//               |  [^]  |  [^]  |  [^]  | [^] | ║ | [^]  | [^]  | [^]  | [^]  |
 
			bindings = <
				&kp ESC	&kp F1		&kp F2			&kp F3			&kp F4			&kp F5		/*║*/	&kp F6		&kp F7		&kp F8		&kp F9		&kp F10		&kp DEL
				&trans	&soft_off	&c_lboot 0 0	&out OUT_USB	&out OUT_BLE	&none		/*║*/	&kp MINUS	&kp EQUAL	&kp LBKT	&kp RBKT	&kp F11		&c_rboot 0 0
				&trans	&C_VOL_DN	&kp C_VOL_UP	&kp C_PREV		&kp C_PP		&kp C_NEXT	/*║*/	&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT	&kp F12		&trans
				&trans	BTP_SEL(0)	BTP_SEL(1)		BTP_SEL(2)		BTP_SEL(3)		&c_bt 0 0	/*║*/	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END		&kp PSCRN	&trans
									&trans			&trans			&trans			&trans		/*║*/	&trans		&trans		&trans		&trans
			>;
		};
	};
};
