#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/matrix_transform.h>

#define L_MAIN 0
#define L_RAISE 1
#define L_LOWER 2
#define L_GAME 3

#define DEFAULT_TAPTERM_MS 200
#define COMBO_TIMEOUT 50

// Tab align to 4 spaces or perish

/ {
	combos {
		compatible = "zmk,combos";

		combo_esc {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <RC(0,0) RC(1,0)>;
			bindings = <&kp ESC>;
			layers =  <L_MAIN L_GAME>;
		};

		combo_game_layer {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <RC(4,2) RC(4,9)>;
			bindings = <&to L_GAME>;
			layers =  <L_MAIN>;
		};

		combo_leave_game_layer {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <RC(4,2) RC(4,9)>;
			bindings = <&to L_MAIN>;
			layers =  <L_GAME>;
		};
	};

	behaviors {
		td_rs: tap_dance_rshift_rctrl {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;

			tapping-term-ms = <DEFAULT_TAPTERM_MS>;
			bindings = <&kp RSHIFT>, <&kp RCTRL>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			//                                    Main Layer
			// =========================================================================================
			// |  ~   |  1  |  2  |  3  |  4  |  5  | ║ |  6  |  7  |  8  |  9  |  0  |    BKSP   |
			// | TAB  |  Q  |  W  |  F  |  P  |  B  | ║ |  J  |  L  |  U  |  Y  |  ;  |     \     |
			// | CTRL |  A  |  R  |  S  |  T  |  G  | ║ |  M  |  N  |  E  |  I  |  O  |    ENTR   |
			// | SHFT |  Z  |  X  |  C  |  D  |  V  | ║ |  K  |  H  |  ,  |  .  |  /  | SHFT/CTRL |
			//              | GUI | SPC | ALT | L_? | ║ | L_? | ALT | SPC | GUI |

			bindings = <
				&kp GRAVE	&kp N1	&kp N2		&kp N3		&kp N4		&kp N5	/*║*/	&kp N6		&kp N7		&kp N8		&kp N9		&kp N0		&kp BSPC
				&kp TAB		&kp Q	&kp W		&kp F		&kp P		&kp B	/*║*/	&kp J		&kp L		&kp U		&kp Y		&kp SEMI	&kp BSLH
				&kp LCTRL	&kp A	&kp R		&kp S		&kp T		&kp G	/*║*/	&kp M		&kp N		&kp E		&kp I		&kp O		&kp RET
				&kp LSHFT	&kp Z	&kp X		&kp C		&kp D		&kp V	/*║*/	&kp K		&kp H		&kp COMMA	&kp DOT		&kp FSLH	&td_rs
									&mo L_LOWER	&kp SPACE	&kp LGUI	&LALT	/*║*/	&kp RALT	&kp RGUI	&kp SPACE	&mo L_RAISE
			>;
		};

		lower_layer = {
			//                                    Main Layer
			// =========================================================================================
			// |  ~   |  1  |  2  |  3  |  4  |  5  | ║ |  6  |  7  |  8  |  9  |  0  | BKSP |
			// | TAB  |  Q  |  W  |  F  |  P  |  B  | ║ |  J  |  L  |  U  |  Y  |  ;  |  \   |
			// | CTRL |  A  |  R  |  S  |  T  |  G  | ║ |  M  |  N  |  E  |  I  |  O  | ENTR |
			// | SHFT |  Z  |  X  |  C  |  D  |  V  | ║ |  K  |  H  |  ,  |  .  |  /  | SHFT |
			//              | GUI | SPC | ALT | L_? | ║ | L_? | ALT | SPC | GUI |

			bindings = <
				&kp GRAVE	&kp N1	&kp N2	&kp N3		&kp N4		&kp N5	/*║*/	&kp N6		&kp N7		&kp N8		&kp N9	&kp N0		&kp BSPC
				&kp TAB		&kp Q	&kp W	&kp F		&kp P		&kp B	/*║*/	&kp J		&kp L		&kp U		&kp Y	&kp SEMI	&kp BSLH
				&kp LCTRL	&kp A	&kp R	&kp S		&kp N7		&kp G	/*║*/	&kp M		&kp N		&kp E		&kp I	&kp O		&kp RET
				&kp LSHFT	&kp Z	&kp X	&kp C		&kp D		&kp V	/*║*/	&kp K		&kp H		&kp COMMA	&kp DOT	&kp FSLH	&td_rs
									&trans	&kp SPACE	&kp LGUI	&LALT	/*║*/	&kp RALT	&kp RGUI	&kp SPACE	&trans
			>;
		};

		raise_layer = {
			//                                    Main Layer
			// =========================================================================================
			// |  ~   |  1  |  2  |  3  |  4  |  5  | ║ |  6  |  7  |  8  |  9  |  0  | BKSP |
			// | TAB  |  Q  |  W  |  F  |  P  |  B  | ║ |  J  |  L  |  U  |  Y  |  ;  |  \   |
			// | CTRL |  A  |  R  |  S  |  T  |  G  | ║ |  M  |  N  |  E  |  I  |  O  | ENTR |
			// | SHFT |  Z  |  X  |  C  |  D  |  V  | ║ |  K  |  H  |  ,  |  .  |  /  | SHFT |
			//              | GUI | SPC | ALT | L_? | ║ | L_? | ALT | SPC | GUI |

			bindings = <
				&kp GRAVE	&kp N1	&kp N2	&kp N3		&kp N4		&kp N5		/*║*/	&kp N6		&kp N7		&kp N8		&kp N9	&kp N0		&kp BSPC
				&kp TAB		&kp Q	&kp W	&kp F		&kp P		&kp B		/*║*/	&kp J		&kp L		&kp U		&kp Y	&kp SEMI	&kp BSLH
				&kp LCTRL	&kp A	&kp R	&kp S		&kp N8		&kp G		/*║*/	&kp M		&kp N		&kp E		&kp I	&kp O		&kp RET
				&kp LSHFT	&kp Z	&kp X	&kp C		&kp D		&kp V		/*║*/	&kp K		&kp H		&kp COMMA	&kp DOT	&kp FSLH	&td_rs
									&trans	&kp SPACE	&kp LGUI	&kp LALT	/*║*/	&kp RALT	&kp RGUI	&kp SPACE	&trans
			>;
		};

		game_layer = {
			//                                    Game Layer
			// =========================================================================================
			// |  ~   |  1  |  2  |  3  |  4  |  5  | ║ |  6  |  7  |  8  |  9  |  0  | BKSP |
			// | TAB  |  Q  |  W  |  E  |  R  |  T  | ║ |  Y  |  U  |  I  |  O  |  P  |  \   |
			// | CTRL |  A  |  S  |  D  |  F  |  G  | ║ |  H  |  J  |  K  |  L  |  ;  | ENTR |
			// | SHFT |  Z  |  X  |  C  |  V  |  B  | ║ |  N  |  M  |  ,  |  .  |  /  | SHFT |
			//              | GUI | SPC | ALT | L_? | ║ | L_? | ALT | SPC | GUI |

			BINDINGS = <
				&KP GRAVE	&KP N1	&KP N2	&KP N3		&KP N4		&KP N5		/*║*/	&KP N6		&KP N7		&KP N8		&KP N9	&KP N0		&KP BSPC
				&KP TAB		&KP Q	&KP W	&KP E		&KP R		&KP T		/*║*/	&KP J		&KP L		&KP U		&KP Y	&KP SEMI	&KP BSLH
				&KP LCTRL	&KP A	&KP S	&KP D		&KP F		&KP G		/*║*/	&KP M		&KP N		&KP E		&KP I	&KP O		&KP RET
				&KP LSHFT	&KP Z	&KP X	&KP C		&KP V		&KP B		/*║*/	&KP K		&KP H		&KP COMMA	&KP DOT	&KP FSLH	&TD_RS
									&NONE	&KP SPACE	&KP LGUI	&KP LALT	/*║*/	&KP RALT	&KP RGUI	&KP SPACE	&NONE
			>;
		};
	};
};








// 		lower_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
// //		    | GUI |     | SPC |   | ENT |     | ALT |
// 			bindings = <
//    &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5	 &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
//    &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
//    &kp LSHFT  &trans       &trans       &trans       &trans       &trans	 &trans   &trans   &trans &trans    &trans &trans
// 				    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
// 			>;
// 		};
//
// 		raise_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
// //		    | GUI |     | SPC |   | ENT |     | ALT |
// 			bindings = <
//    &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
//    &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
//    &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
// 			     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
// 			>;
// 		};
